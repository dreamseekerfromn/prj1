head	1.18;
access;
symbols;
locks
	o2-yi:1.18; strict;
comment	@ * @;


1.18
date	2016.09.17.14.18.50;	author o2-yi;	state Exp;
branches;
next	1.17;

1.17
date	2016.09.16.12.20.35;	author o2-yi;	state Exp;
branches;
next	1.16;

1.16
date	2016.09.16.12.04.32;	author o2-yi;	state Exp;
branches;
next	1.15;

1.15
date	2016.09.16.12.03.46;	author o2-yi;	state Exp;
branches;
next	1.14;

1.14
date	2016.09.16.12.02.44;	author o2-yi;	state Exp;
branches;
next	1.13;

1.13
date	2016.09.14.21.49.20;	author o2-yi;	state Exp;
branches;
next	1.12;

1.12
date	2016.09.14.18.35.38;	author o2-yi;	state Exp;
branches;
next	1.11;

1.11
date	2016.09.14.18.01.02;	author o2-yi;	state Exp;
branches;
next	1.10;

1.10
date	2016.09.14.17.59.08;	author o2-yi;	state Exp;
branches;
next	1.9;

1.9
date	2016.09.14.16.08.00;	author o2-yi;	state Exp;
branches;
next	1.8;

1.8
date	2016.09.14.16.03.25;	author o2-yi;	state Exp;
branches;
next	1.7;

1.7
date	2016.09.14.15.46.15;	author o2-yi;	state Exp;
branches;
next	1.6;

1.6
date	2016.09.14.15.34.24;	author o2-yi;	state Exp;
branches;
next	1.5;

1.5
date	2016.02.11.00.40.33;	author o3-yi;	state Exp;
branches;
next	1.4;

1.4
date	2016.02.10.18.03.50;	author o3-yi;	state Exp;
branches;
next	1.3;

1.3
date	2016.02.10.17.55.01;	author o3-yi;	state Exp;
branches;
next	1.2;

1.2
date	2016.02.10.15.44.32;	author o3-yi;	state Exp;
branches;
next	1.1;

1.1
date	2016.02.10.13.43.26;	author o3-yi;	state Exp;
branches;
next	;


desc
@init
@


1.18
log
@adding missing comments
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <getopt.h>
#include "log.h"

int 
main(int argc, char *argv[]){
	//init var
	int c, hflag, nflag, lflag;
	char *fname = "logfile.txt";	//for -l switch, default is logfile.txt
	char *e;			//for strtol
	int option_index = 0;		//for getopt_long
	int err_flag = 0;		//for getopt_long
	char *strbuff = "42";		//handling default value for -n

	char *endptr;			//for strtol
	long value;			//for strtol


	opterr = 0;

	//initialize flags
	hflag = 0;
	nflag = 0;
	lflag = 0;

	//declare long options
	struct option options[] = {
		{"help", 0, 0, 'h'},
		{0,0,0,0}
	};

	//getopt_long will be used to accept long switch
	//short ones will be h,n,l
	if (argc >1){
		while(( c = getopt_long(argc,argv, ":hn:l:", options,&option_index)) != -1)
			switch (c)
				{
					//-h, --help for information about switch
					case 'h':
						hflag = 1;
						break;
					//-n to print different integer on the logfile
					case 'n':
						nflag = 1;
						printf("%s\n",optarg);

						//strtol to check int or not
						value = strtol(optarg,&endptr, 10);
						if(*endptr !='\0')
							{
								printf("test : you must type digits after -n, not %s",stderr);
								return 1;
							}
						strbuff = (char *)malloc(strlen(optarg)+1);
						strcpy(strbuff,optarg);
						break;
					//-l to change logfile name
					case 'l':
						lflag = 1;
						if(strncmp(optarg,"-",1) == 0)
							{
								perror("test : you must type file name after -l switch.");
								return 1;
							}
						fname = (char*) malloc(strlen(optarg)+1);
						strcpy(fname,optarg);
						break;
					//errors in getopt
					case '?':
						err_flag = 1;
						printf("Unknown option : -%c is found\n", optopt);
						break;
				}
	}
	//if errflag is on, just exit
	if (err_flag ==1)
		{
			return 1;
		}
	//if iflag is on
	//print simple definition and then term
	if (hflag == 1)
		{
			printf("this program is designed for testing log library function\n");
			printf("-h --help\n print options\n");
			printf("-n [value]\n to print [value] on the logfile\n");
			printf("-l [filename]\n change logfile name to [filename]\n");
		}
	else
		{
			create_log(strbuff);
			//if no switch
			//just test the loglib
			//next 3 lines will test addmsg func
			create_log("TEST : this is test msg");
			create_log("TEST : this is test msg for queue");
			create_log("TEST : this is test msg for clearfunc");
	
			savelog(fname);
	
			//next 2 lines will test getlog func
			char *strings = getlog();
			printf("%s", strings);


			//next 3 will test clearlog func
			clearlog();
			strings = getlog();
			printf("%s", strings);
		}

	return 0;
}
@


1.17
log
@n is working now
@
text
@d15 2
a16 2
	int err_flag = 0;
	char *strbuff = "42";
d18 2
a19 2
	char *endptr;
	long value;
d41 1
d45 1
d49 2
d60 1
d71 1
d78 1
a78 1
	
d89 1
a89 1
			printf("-n \n");
@


1.16
log
@*** empty log message ***
@
text
@d18 3
d46 3
a48 6
						if(isdigit(optarg))
							{
								strbuff = (char*) malloc(strlen(optarg)+1);
								strcpy(strbuff, optarg);
							}
						else
d50 1
a50 1
								perror("test : you must type digits after -n");
d53 2
@


1.15
log
@*** empty log message ***
@
text
@a11 1
	int n_digit = 42;		//for -n switch
d16 1
a16 1
	char *strbuff;
@


1.14
log
@working on -n
@
text
@d46 1
a46 1
								strbuff = (char*) malloc(optarg)+1);
@


1.13
log
@fixing some missing stuffs
-n is still working
@
text
@d12 1
a12 1
	int log_timer = 1;		//for -n switch
d17 1
d44 1
a44 2
						log_timer = atoi(optarg);
						if(log_timer < 1)
d46 6
a51 1
								perror("test : log timer must grater than 0");
d87 1
@


1.12
log
@-l is finished
-h is finished
-n is incomplete
@
text
@d35 1
a35 1
		while(( c = getopt_long(argc,argv, ":h:n:l:", options,&option_index)) != -1)
d43 6
a48 1
						printf("%s opt is b\n",optarg);
@


1.11
log
@finish -l switch
@
text
@a39 1
						printf("%s opt\n",optarg);
d47 5
d71 3
@


1.10
log
@*** empty log message ***
@
text
@d48 2
a49 1
						printf("optarg is %sn .\n",optarg);
@


1.9
log
@added error flag
@
text
@d18 3
d28 2
a29 1
		{"help", 0, 0, 'h'}
d35 1
a35 1
		while(( c = getopt_long(argc,argv, ":h:n:l", options,&option_index)) != -1)
d40 1
d44 1
d48 1
@


1.8
log
@*** empty log message ***
@
text
@d16 1
d44 2
a45 1
						printf("Unknown option : %s is found\n", optopt);
d50 4
@


1.7
log
@replace getopt to getopt long
@
text
@d11 1
a11 1
	int c, hflag, nflag, lfag;
d42 2
a43 1
					default:
@


1.6
log
@rcs for "NEW" edited main.c
main is required to change for accepting new switches
@
text
@d5 1
d11 5
a15 1
	int c, hflag;
d17 12
a28 5
	iflag =0;
	//getopt
	//will use just iflag
	//no error checking
	//just simple and basic one 
d30 1
a30 1
		while(( c = getopt(argc,argv, ":i")) != -1)
d33 8
a40 2
					case 'i':
						iflag = 1;
d49 1
a49 1
	if (iflag == 1)
d62 1
a62 1
			savelog("log.txt");
@


1.5
log
@fix getopt
@
text
@d10 1
a10 1
	int c, iflag;
@


1.4
log
@tried to follow GNU coding standard
@
text
@d4 1
d12 1
d18 1
a18 1
		while(( c = getopt(argc,argv, ":i:")) != -1)
@


1.3
log
@*** empty log message ***
@
text
@d6 2
a7 1
int main(int argc, char *argv[]){
d29 4
a32 3
	if (iflag == 1){
		printf("this program is designed for testing log library function\n");
	}
d34 7
a40 7
	{
		//if no switch
		//just test the loglib
		//next 3 lines will test addmsg func
		create_log("TEST : this is test msg");
		create_log("TEST : this is test msg for queue");
		create_log("TEST : this is test msg for clearfunc");
d42 1
a42 1
		savelog("log.txt");
d44 4
a47 3
		//next 2 lines will test getlog func
		char *strings = getlog();
		printf("%s", strings);
d49 5
a54 5
		//next 3 will test clearlog func
		clearlog();
		strings = getlog();
		printf("%s", strings);
	}
@


1.2
log
@fixing some errors
@
text
@d39 3
a41 1
		
d45 1
@


1.1
log
@Initial revision
@
text
@d1 1
d6 19
a24 1
int main(int argc, char **argv){
d26 23
@
